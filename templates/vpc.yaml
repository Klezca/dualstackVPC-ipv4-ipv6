AWSTemplateFormatVersion: 2010-09-09
Description: >
  This template deploys the aws infrastructure needed to support a dualstack IPv4 and IPv6 VPC network, 
  with a pair of public and private subnets spread across three Availabilty Zones.

Metadata:
  License: Apache 2.0
  Author: Norman Wong Chiew Look

Parameters:
  EnvironmentName:
    Description: Environment Type
    Type: String
    Default: Staging
    AllowedValues:
      - Staging
      - Prod-ap-southeast-2
      - Prod-us-east-1

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  VPCFlowLogRetention:
    Description: VPC Flow Log retention time in days
    Type: String
    Default: 90

Resources:
  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  ########################################################################
  # Create VPC flow log to logs all rejected request occuring in the VPC #
  # and send the logs to cloudwatch log                                  #
  ########################################################################
  VPCFlowLogGroup:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    Type: "AWS::Logs::LogGroup"
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: !Ref VPCFlowLogRetention

  VPCFlowLog:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-flowlog.html
    Type: "AWS::EC2::FlowLog"
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogRole.Arn
      #LogDestination
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref VPCFlowLogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: REJECT

  VPCFlowLogRole:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "VPCFlowLog-${EnvironmentName}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      #PermissionsBoundary:
      Policies:
        - PolicyName: VPCFlowLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Resource: "*"

  # Tell Amazon to allocate an IPv6 Cidr block for this VPC
  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  #######################
  # Create gateways     #
  #######################
  # Allow outbound-only communication over IPv6 in the VPC to the internet
  EgressOnlyInternetGateway:
    Type: "AWS::EC2::EgressOnlyInternetGateway"
    Properties:
      VpcId: !Ref VPC

  # Allow communication to and from the internet over IPv4 and IPv6 in this VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create 3 Static Public IPv4 IP
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayEIP3:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # Assigned EIPs to each Nat Gateway
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref NATSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref NATSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP3.AllocationId
      SubnetId: !Ref NATSubnet3
  ##########################
  # Create route tables    #
  ##########################
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  # 3 NAT Gateways are pricey and can cost up to 100$/months,
  # but that better that having 1 NAT and paying thousand of dollars in inter-AZ routing
  # Source: https://www.reddit.com/r/aws/comments/ejk8nm/why_do_i_have_to_create_a_nat_gateway_per_az_but/
  NATRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NAT Route 1
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  NATRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NAT Route 2
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  NATRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} NAT Route 3
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  WebTierRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Web-tier Route 1
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  WebTierRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Web-tier Route 2
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  WebTierRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Web-tier Route 3
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  MysqlRDSRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} MySQL RDS Route 1
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  MysqlRDSRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} MySQL RDS Route 2
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  MysqlRDSRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} MySQL RDS Route 3
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RedisRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Redis Elasticache Route 1
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RedisRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Redis Elasticache Route 2
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RedisRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Redis Elasticache Route 3
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  #####################################################
  # Associate Gateways and IPv6 destination to route  #
  #####################################################

  IPv6PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway

  IPv6NATRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref NATRouteTable1
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv6NATRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref NATRouteTable2
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv6NATRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref NATRouteTable3
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv6WebTierPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref WebTierRouteTable1
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv6WebTierPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref WebTierRouteTable2
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv6WebTierPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref WebTierRouteTable3
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  IPv6RDSPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref MysqlRDSRouteTable1

  IPv6RDSPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref MysqlRDSRouteTable2

  IPv6RDSPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref MysqlRDSRouteTable3

  IPv6RedisPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref RedisRouteTable1

  IPv6RedisPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref RedisRouteTable2

  IPv6RedisPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationIpv6CidrBlock: "::/0"
      RouteTableId: !Ref RedisRouteTable3

  #####################################################
  # Associate Gateways and IPv4 destination to route  #
  #####################################################

  IPv4PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway

  IPv4NATRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATRouteTable1
      NatGatewayId: !Ref InternetGateway

  IPv4NATPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATRouteTable2
      NatGatewayId: !Ref InternetGateway

  IPv4NATPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATRouteTable3
      NatGatewayId: !Ref InternetGateway

  IPv4WebTierPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref WebTierRouteTable1
      NatGatewayId: !Ref NatGateway1

  IPv4WebTierPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref WebTierRouteTable2
      NatGatewayId: !Ref NatGateway2

  IPv4WebTierPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref WebTierRouteTable3
      NatGatewayId: !Ref NatGateway3

  IPv4RDSPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MysqlRDSRouteTable1
      NatGatewayId: !Ref NatGateway1

  IPv4RDSPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MysqlRDSRouteTable2

  IPv4RDSPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MysqlRDSRouteTable3

  IPv4RedisPrivateRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RedisRouteTable1

  IPv4RedisPrivateRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RedisRouteTable2

  IPv4RedisPrivateRoute3:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RedisRouteTable3

  ##########################
  # Create Public subnets  #
  ##########################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ]
      ########################################################################################
      # The following does not work because of a EC2 API Bug:                                #
      #   "AssignIpv6AddressOnCreation: true" doesn't work if "MapPublicIpOnLaunch: true"    #
      # Reference: https://forums.aws.amazon.com/thread.jspa?threadID=267641                 #
      ########################################################################################
      # AssignIpv6AddressOnCreation: true
      #/20 Cidr block for IPv4
      CidrBlock: !Select [0, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      #/64 Cidr block for IPv6
      Ipv6CidrBlock:
        !Select [0, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [5, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [5, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [10, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [10, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  NATSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [1, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  NATSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [6, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [6, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  NATSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [11, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [11, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  ##########################
  # Create Private subnets #
  ##########################
  WebAppSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      # Create an array with 6 CIDRs with subnet mask "/19" from the "/16" Cidr, and
      # return the first value in the array
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        # Create an array with 6 CIDRs with subnet mask "/64" from the "/56" Cidr, and
        # return the first value in the array
        !Select [2, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  WebAppSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [7, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [7, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  WebAppSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock: !Select [12, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]]
      Ipv6CidrBlock:
        !Select [12, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RDSSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      # Create an array with 6 CIDRs with subnet mask "/19" from the "/16" Cidr, and
      # return the first value in the array
      CidrBlock:
        !Select [
          0,
          !Cidr [!Select [3, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]], 2, 1],
        ]
      Ipv6CidrBlock:
        # Create an array with 6 CIDRs with subnet mask "/64" from the "/56" Cidr, and
        # return the first value in the array
        !Select [3, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ1)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RDSSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock:
        !Select [
          0,
          !Cidr [!Select [8, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]], 2, 1],
        ]
      Ipv6CidrBlock:
        !Select [8, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ2)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RDSSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock:
        !Select [
          0,
          !Cidr [!Select [13, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]], 2, 1],
        ]
      Ipv6CidrBlock:
        !Select [13, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RedisSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock:
        !Select [
          1,
          !Cidr [!Select [4, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]], 2, 1],
        ]
      Ipv6CidrBlock:
        !Select [4, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RedisSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock:
        !Select [
          1,
          !Cidr [!Select [9, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]], 2, 1],
        ]
      Ipv6CidrBlock:
        !Select [9, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  RedisSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ]
      # AssignIpv6AddressOnCreation: true
      CidrBlock:
        !Select [
          1,
          !Cidr [!Select [14, !Cidr [!GetAtt VPC.CidrBlock, 15, 12]], 2, 1],
        ]
      Ipv6CidrBlock:
        !Select [14, !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 15, 64]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Private Subnet (AZ3)
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  #######################################################
  # Associate subnets to either public  route table     #
  #######################################################
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  ######### TODO

  NATRouteTable1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATRouteTable1
      SubnetId: !Ref NATSubnet1

  NATRouteTable2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATRouteTable2
      SubnetId: !Ref NATSubnet2

  NATRouteTable3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATRouteTable3
      SubnetId: !Ref NATSubnet3

  ###
  WebTierRouteTable1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WebTierRouteTable1
      SubnetId: !Ref WebAppSubnet1

  WebTierRouteTable2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WebTierRouteTable1
      SubnetId: !Ref WebAppSubnet2

  WebTierRouteTable3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WebTierRouteTable1
      SubnetId: !Ref WebAppSubnet3

  ###
  MysqlRDSRouteTable1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MysqlRDSRouteTable1
      SubnetId: !Ref RDSSubnet1

  MysqlRDSRouteTable2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MysqlRDSRouteTable2
      SubnetId: !Ref RDSSubnet2

  MysqlRDSRouteTable3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MysqlRDSRouteTable3
      SubnetId: !Ref RDSSubnet3

  ###
  RedisRouteTable1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RedisRouteTable1
      SubnetId: !Ref RedisSubnet1

  RedisRouteTable2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RedisRouteTable2
      SubnetId: !Ref RedisSubnet2

  RedisRouteTable3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RedisRouteTable3
      SubnetId: !Ref RedisSubnet3

  ########################################
  # Workaround to fix the ec2 api bug    #
  # by using lambda as a duct tape       #
  ########################################
  # Temporary credential for lambda to create logs in cloudwatch and change the subnet attribute
  IPv6WorkaroundRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub "ipv6-fix-logs-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub "ipv6-fix-modify-${AWS::StackName}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:ModifySubnetAttribute
                Resource: "*"

  IPv6WorkaroundLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.lambda_handler"
      Code: # import cfnresponse below required to send respose back to CFN
        ZipFile:
          Fn::Sub: |
            import cfnresponse
            import boto3

            def lambda_handler(event, context):
                if event['RequestType'] is 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS)

                responseValue = event['ResourceProperties']['SubnetId']
                ec2 = boto3.client('ec2', region_name='${AWS::Region}')
                ec2.modify_subnet_attribute(AssignIpv6AddressOnCreation = {
                    'Value': True
                }, SubnetId=responseValue)
                responseData = {}
                responseData['myReturnValue'] = responseValue
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
      Runtime: "python3.7"
      Role: !GetAtt IPv6WorkaroundRole.Arn
      Timeout: 30
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} IPv6WorkaroundLambda
        - Key: Account
          Value: !Ref AWS::AccountId
        - Key: ENV
          Value: !Ref EnvironmentName

  #################################################
  # Subnets ID inputs for IPv6WorkaroundLambda    #
  #################################################
  IPv6WorkaroundPublicSubnet1:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PublicSubnet1

  IPv6WorkaroundPublicSubnet2:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PublicSubnet2

  IPv6WorkaroundPublicSubnet3:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref PublicSubnet3

  IPv6WorkaroundNATSubnet1:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref NATSubnet1

  IPv6WorkaroundNATSubnet2:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref NATSubnet2

  IPv6WorkaroundNATSubnet3:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref NATSubnet3

  IPv6WorkaroundWebAppSubnet1:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref WebAppSubnet1

  IPv6WorkaroundWebAppSubnet2:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref WebAppSubnet2

  IPv6WorkaroundWebAppSubnet3:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref WebAppSubnet3

  IPv6WorkaroundRDSSubnet1:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref RDSSubnet1

  IPv6WorkaroundRDSSubnet2:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref RDSSubnet2

  IPv6WorkaroundRDSSubnet3:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref RDSSubnet3

  IPv6WorkaroundRedisSubnet1:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref RedisSubnet1

  IPv6WorkaroundRedisSubnet2:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref RedisSubnet2

  IPv6WorkaroundRedisSubnet3:
    Type: Custom::SubnetModify
    Properties:
      ServiceToken: !GetAtt IPv6WorkaroundLambda.Arn
      SubnetId: !Ref RedisSubnet3

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::VPC-ID"]]

  VPCCidrBlock:
    Description: VPC IPv4 Cidr Block
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::VPC-CidrBlock"]]

  PublicSubnets:
    Description: A list of the public subnets
    Value:
      !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-List"]]

  NATSubnets:
    Description: A list of the NAT-tier subnets
    Value: !Join [",", [!Ref NATSubnet1, !Ref NATSubnet2, !Ref NATSubnet3]]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::NATSubnet-List"]]

  WebAppSubnets:
    Description: A list of the WebApp-tier subnets
    Value:
      !Join [",", [!Ref WebAppSubnet1, !Ref WebAppSubnet2, !Ref WebAppSubnet3]]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::WebAppSubnet-List"]]

  RDSSubnets:
    Description: A list of the RDS-tier subnets
    Value: !Join [",", [!Ref RDSSubnet1, !Ref RDSSubnet2, !Ref RDSSubnet3]]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RDSSubnet-List"]]

  RedisElasticacheSubnets:
    Description: A list of the Redis-tier subnets
    Value:
      !Join [",", [!Ref RedisSubnet1, !Ref RedisSubnet2, !Ref RedisSubnet3]]
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RedisSubnets-List"]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-1"]]

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-2"]]

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicSubnet-3"]]

  NATSubnet1:
    Description: A reference to the NAT subnet in the 1st Availability Zone
    Value: !Ref NATSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::NATSubnet-1"]]

  NATSubnet2:
    Description: A reference to the NAT subnet in the 2nd Availability Zone
    Value: !Ref NATSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::NATSubnet-2"]]

  NATSubnet3:
    Description: A reference to the NAT subnet in the 3rd Availability Zone
    Value: !Ref NATSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::NATSubnet-3"]]

  WebAppSubnet1:
    Description: A reference to the WebApp subnet in the 1st Availability Zone
    Value: !Ref WebAppSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::WebAppSubnet-1"]]

  WebAppSubnet2:
    Description: A reference to the WebApp subnet in the 2nd availability Zone
    Value: !Ref WebAppSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::WebAppSubnet-2"]]

  WebAppSubnet3:
    Description: A reference to the WebApp subnet in the 3rd Availability Zone
    Value: !Ref WebAppSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::WebAppSubnet-3"]]

  RDSSubnet1:
    Description: A reference to the RDS subnet in the 1st Availability Zone
    Value: !Ref RDSSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RDSSubnet-1"]]

  RDSSubnet2:
    Description: A reference to the RDS subnet in the 2nd Availability Zone
    Value: !Ref RDSSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RDSSubnet-2"]]

  RDSSubnet3:
    Description: A reference to the RDS subnet in the 3rd Availability Zone
    Value: !Ref RDSSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RDSSubnet-3"]]

  RedisSubnet1:
    Description: A reference to the RDS subnet in the 1st Availability Zone
    Value: !Ref RedisSubnet1
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RedisSubnet-1"]]

  RedisSubnet2:
    Description: A reference to the RDS subnet in the 2nd Availability Zone
    Value: !Ref RedisSubnet2
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RedisSubnet-2"]]

  RedisSubnet3:
    Description: A reference to the RDS subnet in the 3rd Availability Zone
    Value: !Ref RedisSubnet3
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::RedisSubnet-3"]]

  # NatGateway1EIP:
  #   Description: NAT Gateway 1 IP address
  #   Value: !Ref NatGatewayEIP
  #   Export:
  #     Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::NATGateway-1"]]

  PublicRouteTable:
    Description: A reference to the public route table ID
    Value: !Ref PublicRouteTable
    Export:
      Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PublicRouteTable"]]
  # PrivateRouteTable:
  #   Description: A reference to the private route-table ID
  #   Value: !Ref PrivateRouteTable
  #   Export:
  #     Name: !Join ["", ["VPC::", !Ref EnvironmentName, "::PrivateRouteTable"]]
